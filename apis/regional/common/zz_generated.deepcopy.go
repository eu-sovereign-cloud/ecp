//go:build !ignore_autogenerated

// Copyright (c) 2025 The ECP Authors
// SPDX-License-Identifier: Apache-2.0
//
// This file is part of the ECP project and may be used under the terms of the
// Apache License, Version 2.0. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// Code generated by controller-gen. DO NOT EDIT.

package common

import ()

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegionalCommonData) DeepCopyInto(out *RegionalCommonData) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Extensions != nil {
		in, out := &in.Extensions, &out.Extensions
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RegionalCommonData.
func (in *RegionalCommonData) DeepCopy() *RegionalCommonData {
	if in == nil {
		return nil
	}
	out := new(RegionalCommonData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RegionalCommonSpec) DeepCopyInto(out *RegionalCommonSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RegionalCommonSpec.
func (in *RegionalCommonSpec) DeepCopy() *RegionalCommonSpec {
	if in == nil {
		return nil
	}
	out := new(RegionalCommonSpec)
	in.DeepCopyInto(out)
	return out
}
