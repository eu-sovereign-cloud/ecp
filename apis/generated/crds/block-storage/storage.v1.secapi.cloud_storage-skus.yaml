---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: storage-skus.storage.v1.secapi.cloud
spec:
  group: storage.v1.secapi.cloud
  names:
    kind: StorageSKU
    listKind: StorageSKUList
    plural: storage-skus
    shortNames:
    - storage-sku
    singular: storagesku
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: StorageSKU is the API for getting storage SKU information
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: StorageSkuSpec Specification of the storage SKU, including
              its capabilities and extensions.
            properties:
              iops:
                description: |-
                  Iops The number of IOPS (Input/Output Operations Per Second) guaranteed for
                  the storage SKU.
                type: integer
              minVolumeSize:
                description: MinVolumeSize Minimum volume size for guaranteed performance,
                  in GB.
                type: integer
              type:
                description: |-
                  Type Type of storage SKU. Can be one of the following:

                  * `local-ephemeral`: Local storage is directly attached to the hypervisor
                    hosting the instance. In the event of a hypervisor failure or instance
                    restart, the data may either be lost or become unavailable. The failure
                    mode depends on the Cloud Service Provider (CSP).
                    Users of local storage should be aware of these risks and implement
                    a robust backup strategy or application level replication of the data.
                    Local storage is typically suited for high-performance workloads requiring
                    low latency and high throughput, where the application layer can handle
                    failures. It is not recommended for workloads demanding high availability
                    or data durability. Example use-cases include caching, temporary data
                    or immutable workloads such as operating system images without local data.
                  * `local-durable`: Local durable storage is similar to local storage
                    but is designed to provide data durability while providing high-performance.
                    It is typically implemented using a redundant storage device or
                    replicated storage solution. Local durable storage is suitable for
                    workloads requiring high performance and low latency, while also
                    ensuring data durability at the cost of availability. The time to
                    restore data may vary depending on the CSP and the
                    will be significantly higher then using `remote-durable` storage.
                    Example use-cases include replicated paxos or raft based databases or
                    replicated databases using synchronous replication, in addition to
                    file storage.
                  * `remote-durable`: Remote storage is a network-attached storage solution
                    designed to provide data redundancy and high availability. While
                    typically slower than local storage, remote storage offers the
                    advantage of being accessible by different hypervisors.
                    This means the storage can be used by different instances running
                    on separate hypervisors, but only one instance at a time. This
                    enabled the recreation of the instance with the same storage on a
                    different hypervisor and therefore greatly reduces the recovery
                    time in case of failure of the hypervisor. Remote storage cannot be
                    attached to multiple instances simultaneously.
                    Example use-cases include file storage or replicated databases
                    using asynchronous replication.
                type: string
            required:
            - iops
            - minVolumeSize
            - type
            type: object
        type: object
    served: true
    storage: true
