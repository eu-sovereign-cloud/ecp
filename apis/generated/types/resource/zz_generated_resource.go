// Package resource provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package resource

// +kubebuilder:object:generate=true

import (
	"encoding/json"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GlobalResourceMetadataKind.
const (
	GlobalResourceMetadataKindActivityLog          GlobalResourceMetadataKind = "activity-log"
	GlobalResourceMetadataKindBlockStorage         GlobalResourceMetadataKind = "block-storage"
	GlobalResourceMetadataKindImage                GlobalResourceMetadataKind = "image"
	GlobalResourceMetadataKindInstance             GlobalResourceMetadataKind = "instance"
	GlobalResourceMetadataKindInstanceSku          GlobalResourceMetadataKind = "instance-sku"
	GlobalResourceMetadataKindInternetGateway      GlobalResourceMetadataKind = "internet-gateway"
	GlobalResourceMetadataKindNetwork              GlobalResourceMetadataKind = "network"
	GlobalResourceMetadataKindNetworkLoadBalancer  GlobalResourceMetadataKind = "network-load-balancer"
	GlobalResourceMetadataKindNetworkSku           GlobalResourceMetadataKind = "network-sku"
	GlobalResourceMetadataKindNic                  GlobalResourceMetadataKind = "nic"
	GlobalResourceMetadataKindObjectStorageAccount GlobalResourceMetadataKind = "object-storage-account"
	GlobalResourceMetadataKindPublicIp             GlobalResourceMetadataKind = "public-ip"
	GlobalResourceMetadataKindRegion               GlobalResourceMetadataKind = "region"
	GlobalResourceMetadataKindRole                 GlobalResourceMetadataKind = "role"
	GlobalResourceMetadataKindRoleAssignment       GlobalResourceMetadataKind = "role-assignment"
	GlobalResourceMetadataKindRoutingTable         GlobalResourceMetadataKind = "routing-table"
	GlobalResourceMetadataKindSecurityGroup        GlobalResourceMetadataKind = "security-group"
	GlobalResourceMetadataKindSecurityGroupRule    GlobalResourceMetadataKind = "security-group-rule"
	GlobalResourceMetadataKindStorageSku           GlobalResourceMetadataKind = "storage-sku"
	GlobalResourceMetadataKindSubnet               GlobalResourceMetadataKind = "subnet"
	GlobalResourceMetadataKindWorkspace            GlobalResourceMetadataKind = "workspace"
)

// Defines values for RegionalResourceMetadataKind.
const (
	RegionalResourceMetadataKindActivityLog          RegionalResourceMetadataKind = "activity-log"
	RegionalResourceMetadataKindBlockStorage         RegionalResourceMetadataKind = "block-storage"
	RegionalResourceMetadataKindImage                RegionalResourceMetadataKind = "image"
	RegionalResourceMetadataKindInstance             RegionalResourceMetadataKind = "instance"
	RegionalResourceMetadataKindInstanceSku          RegionalResourceMetadataKind = "instance-sku"
	RegionalResourceMetadataKindInternetGateway      RegionalResourceMetadataKind = "internet-gateway"
	RegionalResourceMetadataKindNetwork              RegionalResourceMetadataKind = "network"
	RegionalResourceMetadataKindNetworkLoadBalancer  RegionalResourceMetadataKind = "network-load-balancer"
	RegionalResourceMetadataKindNetworkSku           RegionalResourceMetadataKind = "network-sku"
	RegionalResourceMetadataKindNic                  RegionalResourceMetadataKind = "nic"
	RegionalResourceMetadataKindObjectStorageAccount RegionalResourceMetadataKind = "object-storage-account"
	RegionalResourceMetadataKindPublicIp             RegionalResourceMetadataKind = "public-ip"
	RegionalResourceMetadataKindRegion               RegionalResourceMetadataKind = "region"
	RegionalResourceMetadataKindRole                 RegionalResourceMetadataKind = "role"
	RegionalResourceMetadataKindRoleAssignment       RegionalResourceMetadataKind = "role-assignment"
	RegionalResourceMetadataKindRoutingTable         RegionalResourceMetadataKind = "routing-table"
	RegionalResourceMetadataKindSecurityGroup        RegionalResourceMetadataKind = "security-group"
	RegionalResourceMetadataKindSecurityGroupRule    RegionalResourceMetadataKind = "security-group-rule"
	RegionalResourceMetadataKindStorageSku           RegionalResourceMetadataKind = "storage-sku"
	RegionalResourceMetadataKindSubnet               RegionalResourceMetadataKind = "subnet"
	RegionalResourceMetadataKindWorkspace            RegionalResourceMetadataKind = "workspace"
)

// Defines values for ResourceMetadataKind.
const (
	ResourceMetadataKindActivityLog          ResourceMetadataKind = "activity-log"
	ResourceMetadataKindBlockStorage         ResourceMetadataKind = "block-storage"
	ResourceMetadataKindImage                ResourceMetadataKind = "image"
	ResourceMetadataKindInstance             ResourceMetadataKind = "instance"
	ResourceMetadataKindInstanceSku          ResourceMetadataKind = "instance-sku"
	ResourceMetadataKindInternetGateway      ResourceMetadataKind = "internet-gateway"
	ResourceMetadataKindNetwork              ResourceMetadataKind = "network"
	ResourceMetadataKindNetworkLoadBalancer  ResourceMetadataKind = "network-load-balancer"
	ResourceMetadataKindNetworkSku           ResourceMetadataKind = "network-sku"
	ResourceMetadataKindNic                  ResourceMetadataKind = "nic"
	ResourceMetadataKindObjectStorageAccount ResourceMetadataKind = "object-storage-account"
	ResourceMetadataKindPublicIp             ResourceMetadataKind = "public-ip"
	ResourceMetadataKindRegion               ResourceMetadataKind = "region"
	ResourceMetadataKindRole                 ResourceMetadataKind = "role"
	ResourceMetadataKindRoleAssignment       ResourceMetadataKind = "role-assignment"
	ResourceMetadataKindRoutingTable         ResourceMetadataKind = "routing-table"
	ResourceMetadataKindSecurityGroup        ResourceMetadataKind = "security-group"
	ResourceMetadataKindSecurityGroupRule    ResourceMetadataKind = "security-group-rule"
	ResourceMetadataKindStorageSku           ResourceMetadataKind = "storage-sku"
	ResourceMetadataKindSubnet               ResourceMetadataKind = "subnet"
	ResourceMetadataKindWorkspace            ResourceMetadataKind = "workspace"
)

// Defines values for ResourceState.
const (
	Active    ResourceState = "active"
	Creating  ResourceState = "creating"
	Deleting  ResourceState = "deleting"
	Error     ResourceState = "error"
	Pending   ResourceState = "pending"
	Suspended ResourceState = "suspended"
	Updating  ResourceState = "updating"
)

// Defines values for TypeMetadataKind.
const (
	TypeMetadataKindActivityLog          TypeMetadataKind = "activity-log"
	TypeMetadataKindBlockStorage         TypeMetadataKind = "block-storage"
	TypeMetadataKindImage                TypeMetadataKind = "image"
	TypeMetadataKindInstance             TypeMetadataKind = "instance"
	TypeMetadataKindInstanceSku          TypeMetadataKind = "instance-sku"
	TypeMetadataKindInternetGateway      TypeMetadataKind = "internet-gateway"
	TypeMetadataKindNetwork              TypeMetadataKind = "network"
	TypeMetadataKindNetworkLoadBalancer  TypeMetadataKind = "network-load-balancer"
	TypeMetadataKindNetworkSku           TypeMetadataKind = "network-sku"
	TypeMetadataKindNic                  TypeMetadataKind = "nic"
	TypeMetadataKindObjectStorageAccount TypeMetadataKind = "object-storage-account"
	TypeMetadataKindPublicIp             TypeMetadataKind = "public-ip"
	TypeMetadataKindRegion               TypeMetadataKind = "region"
	TypeMetadataKindRole                 TypeMetadataKind = "role"
	TypeMetadataKindRoleAssignment       TypeMetadataKind = "role-assignment"
	TypeMetadataKindRoutingTable         TypeMetadataKind = "routing-table"
	TypeMetadataKindSecurityGroup        TypeMetadataKind = "security-group"
	TypeMetadataKindSecurityGroupRule    TypeMetadataKind = "security-group-rule"
	TypeMetadataKindStorageSku           TypeMetadataKind = "storage-sku"
	TypeMetadataKindSubnet               TypeMetadataKind = "subnet"
	TypeMetadataKindWorkspace            TypeMetadataKind = "workspace"
)

// Defines values for ZonalResourceMetadataKind.
const (
	ActivityLog          ZonalResourceMetadataKind = "activity-log"
	BlockStorage         ZonalResourceMetadataKind = "block-storage"
	Image                ZonalResourceMetadataKind = "image"
	Instance             ZonalResourceMetadataKind = "instance"
	InstanceSku          ZonalResourceMetadataKind = "instance-sku"
	InternetGateway      ZonalResourceMetadataKind = "internet-gateway"
	Network              ZonalResourceMetadataKind = "network"
	NetworkLoadBalancer  ZonalResourceMetadataKind = "network-load-balancer"
	NetworkSku           ZonalResourceMetadataKind = "network-sku"
	Nic                  ZonalResourceMetadataKind = "nic"
	ObjectStorageAccount ZonalResourceMetadataKind = "object-storage-account"
	PublicIp             ZonalResourceMetadataKind = "public-ip"
	Region               ZonalResourceMetadataKind = "region"
	Role                 ZonalResourceMetadataKind = "role"
	RoleAssignment       ZonalResourceMetadataKind = "role-assignment"
	RoutingTable         ZonalResourceMetadataKind = "routing-table"
	SecurityGroup        ZonalResourceMetadataKind = "security-group"
	SecurityGroupRule    ZonalResourceMetadataKind = "security-group-rule"
	StorageSku           ZonalResourceMetadataKind = "storage-sku"
	Subnet               ZonalResourceMetadataKind = "subnet"
	Workspace            ZonalResourceMetadataKind = "workspace"
)

// GlobalResourceMetadata defines model for GlobalResourceMetadata.
type GlobalResourceMetadata struct {
	// ApiVersion API version of the resource
	ApiVersion string `json:"apiVersion"`

	// CreatedAt Indicates the time when the resource was created. The field is set by the provider and should not be modified by the user.
	CreatedAt metav1.Time `json:"createdAt"`

	// DeletedAt If set, indicates the time when the resource was marked for deletion. Resources with this field set are considered pending deletion.
	DeletedAt *metav1.Time `json:"deletedAt,omitempty"`

	// Kind Type of the resource
	Kind GlobalResourceMetadataKind `json:"kind"`

	// LastModifiedAt Indicates the time when the resource was created or last modified. Field is used for "If-Unmodified-Since" logic for concurrency control. The provider guarantees that a modification on a single resource can happen only once every millisecond.
	LastModifiedAt metav1.Time `json:"lastModifiedAt"`

	// Name Resource identifier in dash-case (kebab-case) format. Must start and end with an alphanumeric character.
	// Can contain lowercase letters, numbers, and hyphens. Multiple segments can be joined with dots.
	// Each segment follows the same rules.
	Name     string `json:"name"`
	Provider string `json:"provider"`

	// Ref Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
	// The reference can be used to refer to a resource in other resources.
	Ref      *Reference `json:"ref,omitempty"`
	Resource string     `json:"resource"`

	// ResourceVersion Incremented on every modification of the resource. Used for optimistic concurrency control.
	ResourceVersion int `json:"resourceVersion"`

	// Tenant Tenant identifier
	Tenant string `json:"tenant"`
	Verb   string `json:"verb"`
}

// GlobalResourceMetadataKind Type of the resource
type GlobalResourceMetadataKind string

// ModificationMetadata Base metadata for all resources with optional region references
type ModificationMetadata struct {
	// CreatedAt Indicates the time when the resource was created. The field is set by the provider and should not be modified by the user.
	CreatedAt metav1.Time `json:"createdAt"`

	// DeletedAt If set, indicates the time when the resource was marked for deletion. Resources with this field set are considered pending deletion.
	DeletedAt *metav1.Time `json:"deletedAt,omitempty"`

	// LastModifiedAt Indicates the time when the resource was created or last modified. Field is used for "If-Unmodified-Since" logic for concurrency control. The provider guarantees that a modification on a single resource can happen only once every millisecond.
	LastModifiedAt metav1.Time `json:"lastModifiedAt"`

	// ResourceVersion Incremented on every modification of the resource. Used for optimistic concurrency control.
	ResourceVersion int `json:"resourceVersion"`
}

// NameMetadata Metadata for resource names
type NameMetadata struct {
	// Name Resource identifier in dash-case (kebab-case) format. Must start and end with an alphanumeric character.
	// Can contain lowercase letters, numbers, and hyphens. Multiple segments can be joined with dots.
	// Each segment follows the same rules.
	Name string `json:"name"`
}

// PermissionMetadata Metadata for permission management
type PermissionMetadata struct {
	Provider string `json:"provider"`
	Resource string `json:"resource"`
	Verb     string `json:"verb"`
}

// Reference Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
// The reference can be used to refer to a resource in other resources.
type Reference struct {
	union json.RawMessage
}

// ReferenceObject A reference to a resource using an object. The object contains the
// same information as the ReferenceURN, but is represented as a structured object.
// The advantage of this representation is that it can be used to reference
// resources in different workspaces or regions without the need to specify
// the full URN.
type ReferenceObject struct {
	// Provider Provider of the resource. If not set, the provider is inferred from the context.
	Provider *string `json:"provider,omitempty"`

	// Region Region of the resource. If not set, the region is inferred from the context.
	Region *string `json:"region,omitempty"`

	// Resource Name and type of the resource. Must be in the format `<type>/<name>`.
	// The type is the resource type, and the name is the resource name.
	Resource string `json:"resource"`

	// Tenant Tenant of the resource. If not set, the tenant is inferred from the context.
	Tenant *string `json:"tenant,omitempty"`

	// Workspace Workspace of the resource. If not set, the workspace is inferred from the context.
	Workspace *string `json:"workspace,omitempty"`
}

// ReferenceURN A unique resource name used to reference this resource in other resources. The reference
// is represented as the full URN (Uniform Resource Name) name of the resource.
//
// ### Automatic Prefix Inference
//
// In most cases, the prefix of the URN can be automatically derived in the given context.
// To simplify usage, only the resource type and name might be specified as a reference
// using the `<type>/<name>` notation. The suffix can be made more specific by adding
// additional segments separated by slashes.
//
// The prefix is automatically inferred from the context. For example, if the resource is a
// block storage in the same workspace the reference can be specified as
// `block-storages/my-block-storage`. If the resource is a block storage in a different workspace, the
// reference can be specified as `workspaces/ws-1/block-storages/my-block-storage`.
//
// For automatic prefix inference, the following rules apply:
// - the version is inferred from the current resource version
// - the workspace is inferred from the current workspace
// - the region is inferred from the current region
// - the provider is inferred from the type and context of the usage
//
// The prefix inference is resolved on admission into the full URN format, which makes it
// mostly suitable for human use.
type ReferenceURN = string

// RegionalMetadata Metadata for regional resources
type RegionalMetadata struct {
	// Region Reference to the region where the resource is located
	Region string `json:"region"`

	// Workspace Workspace identifier
	Workspace *string `json:"workspace,omitempty"`
}

// RegionalResourceMetadata defines model for RegionalResourceMetadata.
type RegionalResourceMetadata struct {
	// ApiVersion API version of the resource
	ApiVersion string `json:"apiVersion"`

	// CreatedAt Indicates the time when the resource was created. The field is set by the provider and should not be modified by the user.
	CreatedAt metav1.Time `json:"createdAt"`

	// DeletedAt If set, indicates the time when the resource was marked for deletion. Resources with this field set are considered pending deletion.
	DeletedAt *metav1.Time `json:"deletedAt,omitempty"`

	// Kind Type of the resource
	Kind RegionalResourceMetadataKind `json:"kind"`

	// LastModifiedAt Indicates the time when the resource was created or last modified. Field is used for "If-Unmodified-Since" logic for concurrency control. The provider guarantees that a modification on a single resource can happen only once every millisecond.
	LastModifiedAt metav1.Time `json:"lastModifiedAt"`

	// Name Resource identifier in dash-case (kebab-case) format. Must start and end with an alphanumeric character.
	// Can contain lowercase letters, numbers, and hyphens. Multiple segments can be joined with dots.
	// Each segment follows the same rules.
	Name     string `json:"name"`
	Provider string `json:"provider"`

	// Ref Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
	// The reference can be used to refer to a resource in other resources.
	Ref *Reference `json:"ref,omitempty"`

	// Region Reference to the region where the resource is located
	Region   string `json:"region"`
	Resource string `json:"resource"`

	// ResourceVersion Incremented on every modification of the resource. Used for optimistic concurrency control.
	ResourceVersion int `json:"resourceVersion"`

	// Tenant Tenant identifier
	Tenant string `json:"tenant"`
	Verb   string `json:"verb"`

	// Workspace Workspace identifier
	Workspace *string `json:"workspace,omitempty"`
}

// RegionalResourceMetadataKind Type of the resource
type RegionalResourceMetadataKind string

// ResourceMetadata defines model for ResourceMetadata.
type ResourceMetadata struct {
	// ApiVersion API version of the resource
	ApiVersion string `json:"apiVersion"`

	// Kind Type of the resource
	Kind ResourceMetadataKind `json:"kind"`

	// Name Resource identifier in dash-case (kebab-case) format. Must start and end with an alphanumeric character.
	// Can contain lowercase letters, numbers, and hyphens. Multiple segments can be joined with dots.
	// Each segment follows the same rules.
	Name string `json:"name"`

	// Ref Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
	// The reference can be used to refer to a resource in other resources.
	Ref *Reference `json:"ref,omitempty"`
}

// ResourceMetadataKind Type of the resource
type ResourceMetadataKind string

// ResourceState Current phase of the resource:
// - pending: not available, waiting for other resources
// - creating: not available, creation started
// - active: available for data layer usage
// - updating: available for data layer usage
// - deleting: maybe still available for data layer user, can fail any moment
// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
// - error: failed to fulfill the request; would be related to provider issue or customer related input.
type ResourceState string

// ResponseMetadata defines model for ResponseMetadata.
type ResponseMetadata struct {
	Provider string `json:"provider"`
	Resource string `json:"resource"`

	// SkipToken Opaque cursor to get the next page. Field is omitted when there are no more pages available.
	SkipToken *string `json:"skipToken,omitempty"`
	Verb      string  `json:"verb"`
}

// SkuResourceMetadata Metadata for resource names
type SkuResourceMetadata = NameMetadata

// Status Current status of the resource
type Status struct {
	Conditions []StatusCondition `json:"conditions"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State *ResourceState `json:"state,omitempty"`
}

// StatusCondition StatusCondition describes the state of a resource at a certain point.
// Conditions are provider-specific and can represent different states depending on the
// resource type and provider implementation.
type StatusCondition struct {
	// LastTransitionAt LastTransitionAt is the last time the condition transitioned from one
	// status to another. This should be when the underlying condition changed.
	// If that is not known, then using the time when the API field changed is
	// acceptable.
	LastTransitionAt metav1.Time `json:"lastTransitionAt"`

	// Message A human-readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`

	// Reason The reason for the condition's last transition in CamelCase.
	// The specific set of reason values is provider-specific and should be
	// documented by the provider.
	Reason *string `json:"reason,omitempty"`

	// State Current phase of the resource:
	// - pending: not available, waiting for other resources
	// - creating: not available, creation started
	// - active: available for data layer usage
	// - updating: available for data layer usage
	// - deleting: maybe still available for data layer user, can fail any moment
	// - suspended: not available, provider specific behavior (payment issue, user decided to suspend)
	// - error: failed to fulfill the request; would be related to provider issue or customer related input.
	State ResourceState `json:"state"`

	// Type Type of condition. The condition type is provider-specific and should
	// reflect the specific states relevant to your resource.
	Type *string `json:"type,omitempty"`
}

// SystemResourceMetadata Metadata for user-defined resource properties
type SystemResourceMetadata struct {
	// Annotations System-defined key/value pairs to annotate the resource.
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Extensions System-defined key/value pairs to document available extensions.
	Extensions *map[string]string `json:"extensions,omitempty"`

	// Labels System-defined key/value pairs to filter resources.
	Labels *map[string]string `json:"labels,omitempty"`
}

// TenantMetadata Metadata for global resources with tenant constraints
type TenantMetadata struct {
	// Tenant Tenant identifier
	Tenant string `json:"tenant"`
}

// TypeMetadata Metadata for all resources with type information.
type TypeMetadata struct {
	// ApiVersion API version of the resource
	ApiVersion string `json:"apiVersion"`

	// Kind Type of the resource
	Kind TypeMetadataKind `json:"kind"`

	// Ref Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
	// The reference can be used to refer to a resource in other resources.
	Ref *Reference `json:"ref,omitempty"`
}

// TypeMetadataKind Type of the resource
type TypeMetadataKind string

// UserResourceMetadata Metadata for user-defined resource properties
type UserResourceMetadata struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions *map[string]string `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels *map[string]string `json:"labels,omitempty"`
}

// ZonalMetadata Metadata for zonal resources
type ZonalMetadata struct {
	// Zone Reference to a specific zone within a region
	Zone Zone `json:"zone"`
}

// ZonalResourceMetadata defines model for ZonalResourceMetadata.
type ZonalResourceMetadata struct {
	// ApiVersion API version of the resource
	ApiVersion string `json:"apiVersion"`

	// CreatedAt Indicates the time when the resource was created. The field is set by the provider and should not be modified by the user.
	CreatedAt metav1.Time `json:"createdAt"`

	// DeletedAt If set, indicates the time when the resource was marked for deletion. Resources with this field set are considered pending deletion.
	DeletedAt *metav1.Time `json:"deletedAt,omitempty"`

	// Kind Type of the resource
	Kind ZonalResourceMetadataKind `json:"kind"`

	// LastModifiedAt Indicates the time when the resource was created or last modified. Field is used for "If-Unmodified-Since" logic for concurrency control. The provider guarantees that a modification on a single resource can happen only once every millisecond.
	LastModifiedAt metav1.Time `json:"lastModifiedAt"`

	// Name Resource identifier in dash-case (kebab-case) format. Must start and end with an alphanumeric character.
	// Can contain lowercase letters, numbers, and hyphens. Multiple segments can be joined with dots.
	// Each segment follows the same rules.
	Name     string `json:"name"`
	Provider string `json:"provider"`

	// Ref Reference to a resource. The reference is represented as the full URN (Uniform Resource Name) name of the resource.
	// The reference can be used to refer to a resource in other resources.
	Ref *Reference `json:"ref,omitempty"`

	// Region Reference to the region where the resource is located
	Region   string `json:"region"`
	Resource string `json:"resource"`

	// ResourceVersion Incremented on every modification of the resource. Used for optimistic concurrency control.
	ResourceVersion int `json:"resourceVersion"`

	// Tenant Tenant identifier
	Tenant string `json:"tenant"`
	Verb   string `json:"verb"`

	// Workspace Workspace identifier
	Workspace *string `json:"workspace,omitempty"`

	// Zone Reference to a specific zone within a region
	Zone Zone `json:"zone"`
}

// ZonalResourceMetadataKind Type of the resource
type ZonalResourceMetadataKind string

// Zone Reference to a specific zone within a region
type Zone = string

// AsReferenceURN returns the union data inside the Reference as a ReferenceURN
func (t Reference) AsReferenceURN() (ReferenceURN, error) {
	var body ReferenceURN
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceURN overwrites any union data inside the Reference as the provided ReferenceURN
func (t *Reference) FromReferenceURN(v ReferenceURN) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceURN performs a merge with any union data inside the Reference, using the provided ReferenceURN
func (t *Reference) MergeReferenceURN(v ReferenceURN) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceObject returns the union data inside the Reference as a ReferenceObject
func (t Reference) AsReferenceObject() (ReferenceObject, error) {
	var body ReferenceObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceObject overwrites any union data inside the Reference as the provided ReferenceObject
func (t *Reference) FromReferenceObject(v ReferenceObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceObject performs a merge with any union data inside the Reference, using the provided ReferenceObject
func (t *Reference) MergeReferenceObject(v ReferenceObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Reference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Reference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
