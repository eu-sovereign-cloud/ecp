// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1
// +kubebuilder:object:generate=true

import (
	resource "github.com/eu-sovereign-cloud/ecp/apis/generated/types/resource"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AcceptHeader.
const (
	AcceptHeaderApplicationjson            AcceptHeader = "application/json"
	AcceptHeaderApplicationjsonDeletedOnly AcceptHeader = "application/json; deleted=only"
	AcceptHeaderApplicationjsonDeletedTrue AcceptHeader = "application/json; deleted=true"
)

// Defines values for ListRoleAssignmentsParamsAccept.
const (
	ListRoleAssignmentsParamsAcceptApplicationjson            ListRoleAssignmentsParamsAccept = "application/json"
	ListRoleAssignmentsParamsAcceptApplicationjsonDeletedOnly ListRoleAssignmentsParamsAccept = "application/json; deleted=only"
	ListRoleAssignmentsParamsAcceptApplicationjsonDeletedTrue ListRoleAssignmentsParamsAccept = "application/json; deleted=true"
)

// Defines values for ListRolesParamsAccept.
const (
	Applicationjson            ListRolesParamsAccept = "application/json"
	ApplicationjsonDeletedOnly ListRolesParamsAccept = "application/json; deleted=only"
	ApplicationjsonDeletedTrue ListRolesParamsAccept = "application/json; deleted=true"
)

// Permission Permission specification, including providers, resources, and verbs.
// Permissions are used to define access control policies for user accounts.
type Permission struct {
	// Provider The provider for which the resource and verbs are defined.
	Provider string `json:"provider"`

	// Resources The resources are the specific resources that the permission applies to.
	// The resource can be a wildcard `*` to represent all resources or a
	// specific resource type. For example, `images/my-image` or
	// `images/*`.
	Resources []string `json:"resources"`

	// Verb The verb is a string that represents the action to be performed on a resource.
	// The standard operations are defined as `get`, `put`, `list`, `delete`. If the
	// resource has additional actions they can to be permitted individually as
	// verb and action in the form `<verb>:<action>`. For example, `post.start`,
	// `post.stop`, `post.restart` or with a wildcard for all actions `post`.
	Verb []string `json:"verb"`
}

// Role defines model for Role.
type Role struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions *map[string]string `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels *map[string]string `json:"labels,omitempty"`

	// Metadata Metadata for global resources with name, permission, modification, type, and tenant information.
	Metadata *resource.GlobalResourceMetadata `json:"metadata,omitempty"`

	// Spec Role specification defined as a list of permissions.
	// Roles are used to define access control policies for
	// a user account using a role assignment.
	Spec RoleSpec `json:"spec"`

	Status *resource.Status `json:"status,omitempty"`
}

// RoleAssignment defines model for RoleAssignment.
type RoleAssignment struct {
	// Annotations User-defined key/value pairs that are mutable and can be used to add annotations.
	// The number of annotations is eventually limited by the CSP.
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Extensions User-defined key/value pairs that are mutable and can be used to add extensions.
	// Extensions are subject to validation by the CSP, and any value that is not accepted will be rejected during admission.
	Extensions *map[string]string `json:"extensions,omitempty"`

	// Labels User-defined key/value pairs that are mutable and can be used to
	// organize and categorize resources. They can be used to filter resources.
	// The number of labels is eventually limited by the CSP.
	Labels *map[string]string `json:"labels,omitempty"`

	// Metadata Metadata for global resources with name, permission, modification, type, and tenant information.
	Metadata *resource.GlobalResourceMetadata `json:"metadata,omitempty"`

	// Spec Role assignment for a user account. The role is assigned to the user account in the context of the specified scopes.
	Spec RoleAssignmentSpec `json:"spec"`

	Status *resource.Status `json:"status,omitempty"`
}

// RoleAssignmentIterator Iterator for role assignments
type RoleAssignmentIterator struct {
	// Items List of role assignments
	Items []RoleAssignment `json:"items"`

	// Metadata Metadata for response objects.
	Metadata resource.ResponseMetadata `json:"metadata"`
}

// RoleAssignmentScope Role assignment scope, including the workspaces, regions and tenants.
type RoleAssignmentScope struct {
	// Regions Optionally, a restriction can be applied to the region
	// where the role assignment is valid. If not specified,
	// the role assignment is valid for all regions.
	Regions *[]string `json:"regions,omitempty"`

	// Tenants Optionally, can be opened to all tenants or restricted to a specific tenant.
	// If not specified, the role assignment is valid for the current tenant.
	Tenants *[]string `json:"tenants,omitempty"`

	// Workspaces Optionally, a restriction can be applied to the workspace
	// where the role assignment is valid. If not specified,
	// the role assignment is valid for all workspaces.
	Workspaces *[]string `json:"workspaces,omitempty"`
}

// RoleAssignmentSpec Role assignment for a user account. The role is assigned to the user account in the context of the specified scopes.
type RoleAssignmentSpec struct {
	// Roles List of assigned role names
	Roles []string `json:"roles"`

	// Scopes List of scopes (e.g., tenant, workspace) for the role assignment
	Scopes []RoleAssignmentScope `json:"scopes"`

	// Subs List of subject IDs (from JWT) to whom the roles are assigned,
	// A wildcard `*` can be used to represent all users of the tenant scopes
	Subs []string `json:"subs"`
}

// RoleIterator Iterator for roles
type RoleIterator struct {
	// Items List of roles
	Items []Role `json:"items"`

	// Metadata Metadata for response objects.
	Metadata resource.ResponseMetadata `json:"metadata"`
}

// RoleSpec Role specification defined as a list of permissions.
// Roles are used to define access control policies for
// a user account using a role assignment.
type RoleSpec struct {
	// Permissions List of permissions granted by this role
	Permissions []Permission `json:"permissions"`
}

// AcceptHeader defines model for acceptHeader.
type AcceptHeader string

// IfUnmodifiedSince defines model for ifUnmodifiedSince.
type IfUnmodifiedSince = int

// LabelSelector defines model for labelSelector.
type LabelSelector = string

// LimitParam defines model for limitParam.
type LimitParam = int

// ResourcePathParam defines model for resourcePathParam.
type ResourcePathParam = string

// SkipTokenParam defines model for skipTokenParam.
type SkipTokenParam = string

// TenantPathParam defines model for tenantPathParam.
type TenantPathParam = string

// ListRoleAssignmentsParams defines parameters for ListRoleAssignments.
type ListRoleAssignmentsParams struct {
	// Labels Filter resources by their labels. Multiple filters are combined with comma.
	// Filter syntax:
	//   - Equals: key=value
	//   - Not equals: key!=value
	//   - Wildcards: *key*=*value* - matches if at least one pair match
	//   - Numeric: key>value, key<value, key>=value, key<=value
	//   - Namespaced key examples: 'monitoring:alert-level=high' or 'billing:team=platform'
	Labels *LabelSelector `form:"labels,omitempty" json:"labels,omitempty"`

	// Limit Maximum number of resources to return in the response
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// SkipToken Opaque cursor for pagination. Use the skipToken from the previous response to get the next page of results. Note that skipTokens do not guarantee consistency across pages if the underlying data changes between requests
	SkipToken *SkipTokenParam `form:"skipToken,omitempty" json:"skipToken,omitempty"`

	// Accept Controls whether deleted resources are included:
	// - `"application/json"`: Returns only non-deleted resources
	// - `"application/json; deleted=true"`: Returns both deleted and non-deleted resources
	// - `"application/json; deleted=only"`: Returns only deleted resources
	Accept *ListRoleAssignmentsParamsAccept `json:"Accept,omitempty"`
}

// ListRoleAssignmentsParamsAccept defines parameters for ListRoleAssignments.
type ListRoleAssignmentsParamsAccept string

// DeleteRoleAssignmentParams defines parameters for DeleteRoleAssignment.
type DeleteRoleAssignmentParams struct {
	// IfUnmodifiedSince Returns resources only if they have not been modified since the specified version.
	// Uses metadata.resourceVersion for comparison.
	IfUnmodifiedSince *IfUnmodifiedSince `json:"if-unmodified-since,omitempty"`
}

// CreateOrUpdateRoleAssignmentParams defines parameters for CreateOrUpdateRoleAssignment.
type CreateOrUpdateRoleAssignmentParams struct {
	// IfUnmodifiedSince Returns resources only if they have not been modified since the specified version.
	// Uses metadata.resourceVersion for comparison.
	IfUnmodifiedSince *IfUnmodifiedSince `json:"if-unmodified-since,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// Labels Filter resources by their labels. Multiple filters are combined with comma.
	// Filter syntax:
	//   - Equals: key=value
	//   - Not equals: key!=value
	//   - Wildcards: *key*=*value* - matches if at least one pair match
	//   - Numeric: key>value, key<value, key>=value, key<=value
	//   - Namespaced key examples: 'monitoring:alert-level=high' or 'billing:team=platform'
	Labels *LabelSelector `form:"labels,omitempty" json:"labels,omitempty"`

	// Limit Maximum number of resources to return in the response
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// SkipToken Opaque cursor for pagination. Use the skipToken from the previous response to get the next page of results. Note that skipTokens do not guarantee consistency across pages if the underlying data changes between requests
	SkipToken *SkipTokenParam `form:"skipToken,omitempty" json:"skipToken,omitempty"`

	// Accept Controls whether deleted resources are included:
	// - `"application/json"`: Returns only non-deleted resources
	// - `"application/json; deleted=true"`: Returns both deleted and non-deleted resources
	// - `"application/json; deleted=only"`: Returns only deleted resources
	Accept *ListRolesParamsAccept `json:"Accept,omitempty"`
}

// ListRolesParamsAccept defines parameters for ListRoles.
type ListRolesParamsAccept string

// DeleteRoleParams defines parameters for DeleteRole.
type DeleteRoleParams struct {
	// IfUnmodifiedSince Returns resources only if they have not been modified since the specified version.
	// Uses metadata.resourceVersion for comparison.
	IfUnmodifiedSince *IfUnmodifiedSince `json:"if-unmodified-since,omitempty"`
}

// CreateOrUpdateRoleParams defines parameters for CreateOrUpdateRole.
type CreateOrUpdateRoleParams struct {
	// IfUnmodifiedSince Returns resources only if they have not been modified since the specified version.
	// Uses metadata.resourceVersion for comparison.
	IfUnmodifiedSince *IfUnmodifiedSince `json:"if-unmodified-since,omitempty"`
}

// CreateOrUpdateRoleAssignmentJSONRequestBody defines body for CreateOrUpdateRoleAssignment for application/json ContentType.
type CreateOrUpdateRoleAssignmentJSONRequestBody = RoleAssignment

// CreateOrUpdateRoleJSONRequestBody defines body for CreateOrUpdateRole for application/json ContentType.
type CreateOrUpdateRoleJSONRequestBody = Role
